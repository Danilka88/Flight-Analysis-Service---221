import shapefile
import json
import re
import difflib # Добавляем импорт difflib

def standardize_region_name(name, geojson_region_names=None):
    if not isinstance(name, str): return name
    name = name.lower()
    
    # Удаляем общие суффиксы и слова
    name = re.sub(r'(область|край|республика|автономный округ|ао|г\.)', '', name)
    name = re.sub(r'(ый|ая|ий|ое|ые|овский|ский|ская|ская)', '', name) # Удаляем окончания
    name = re.sub(r'[^а-я0-9\s-]', '', name) # Удаляем все, кроме кириллицы, цифр, пробелов и дефисов
    name = re.sub(r'\s+', ' ', name).strip() # Удаляем лишние пробелы

    # Специальные случаи маппинга
    # GeoJSON: санкт-петербург, Полеты: санкт-петербургский -> санкт-петербург
    # GeoJSON: ростовская, Полеты: ростовский -> ростовская
    # GeoJSON: московская, Полеты: московский -> московская
    # GeoJSON: свердловская, Полеты: екатеринбургский -> свердловская
    # GeoJSON: саха якутия, Полеты: якутский -> саха якутия
    # GeoJSON: крым, Полеты: симферопольский -> крым
    # GeoJSON: карачаево-черкесия, Полеты: карачаево-черкес -> карачаево-черкесия
    # GeoJSON: северная осетия - алания, Полеты: северная осетия - алани -> северная осетия - алания
    # GeoJSON: ханты-мансийский - югра, Полеты: ханты-мансийский - югр -> ханты-мансийский - югра
    # GeoJSON: еврейская автономная, Полеты: еврейская автономна -> еврейская автономная
    # GeoJSON: забайкальский, Полеты: забайкальск -> забайкальский
    # GeoJSON: приморский, Полеты: приморск -> приморский
    # GeoJSON: камчатский, Полеты: камчатск -> камчатский
    # GeoJSON: хабаровск": "хабаровский",
    # GeoJSON: магаданская, Полеты: магаданск -> магаданская
    # GeoJSON: иркутская, Полеты: иркутск -> иркутская
    # GeoJSON: тюменская, Полеты: тюменск -> тюменская
    # GeoJSON: самарская, Полеты: самарск -> самарская
    # GeoJSON: калининградская, Полеты: калининградск -> калининградская
    # GeoJSON: краснодарский, Полеты: краснодарск -> краснодарский
    # GeoJSON: красноярский, Полеты: красноярск -> красноярский
    # GeoJSON: мурманская, Полеты: мурманск -> мурманская
    # GeoJSON: новосибирская, Полеты: новосибирск -> новосибирская
    # GeoJSON: оренбургская, Полеты: оренбургск -> оренбургская
    # GeoJSON: пензенская, Полеты: пензенск -> пензенская
    # GeoJSON: пермский, Полеты: пермск -> пермский
    # GeoJSON: псковская, Полеты: псковск -> псковская
    # GeoJSON: рязанская, Полеты: рязанск -> рязанская
    # GeoJSON: саратовская, Полеты: саратовск -> саратовская
    # GeoJSON: сахалинская, Полеты: сахалинск -> сахалинская
    # GeoJSON: смоленская, Полеты: смоленск -> смоленская
    # GeoJSON: ставропольский, Полеты: ставропольск -> ставропольский
    # GeoJSON: тамбовская, Полеты: тамбовск -> тамбовская
    # GeoJSON: тверская, Полеты: тверск -> тверская
    # GeoJSON: томская, Полеты: томск -> томская
    # GeoJSON: тульская, Полеты: тульск -> тульская
    # GeoJSON: ульяновская, Полеты: ульяновск -> ульяновская
    # GeoJSON: чукотский, Полеты: чукотск -> чукотский
    # GeoJSON: волгоградская, Полеты: волгоградск -> волгоградская
    # GeoJSON: вологодская, Полеты: вологодск -> вологодская
    # GeoJSON: воронежская, Полеты: воронежск -> воронежская
    # GeoJSON: ярославская, Полеты: ярославск -> ярославская
    # GeoJSON: белгородская, Полеты: белгородск -> белгородская
    # GeoJSON: кировская, Полеты: кировск -> кировская
    # GeoJSON: липецкая, Полеты: липецк -> липецкая
    # GeoJSON: нижегородская, Полеты: нижегородск -> нижегородская
    # GeoJSON: новгородская, Полеты: новгородск -> новгородская
    # GeoJSON: омская, Полеты: омск -> омская
    # GeoJSON: орловская, Полеты: орловск -> орловская
    # GeoJSON: амурская, Полеты: амурск -> амурская
    # GeoJSON: адыгея, Полеты: адыге -> адыгея
    # GeoJSON: алтайский, Полеты: алтайск -> алтайский
    # GeoJSON: башкортостан, Полеты: башкортостан -> башкортостан
    # GeoJSON: бурятия, Полеты: бурят -> бурятия
    # GeoJSON: калмыкия, Полеты: калмыки -> калмыкия
    # GeoJSON: карелия, Полеты: карели -> карелия
    # GeoJSON: коми, Полеты: коми -> коми
    # GeoJSON: крым, Полеты: крым -> крым
    # GeoJSON: марий эл, Полеты: марий эл -> марий эл
    # GeoJSON: москва, Полеты: москва -> москва
    # GeoJSON: севастополь, Полеты: севастополь -> севастополь
    # GeoJSON: татарстан, Полеты: татарстан -> татарстан
    # GeoJSON: тыва, Полеты: тыва -> тыва
    # GeoJSON: удмуртия, Полеты: удмурти -> удмуртия
    # GeoJSON: чечня, Полеты: чечен -> чечня
    # GeoJSON: чувашия, Полеты: чуваш -> чувашия
    # GeoJSON: сумска, Полеты: сумск -> сумска
    # GeoJSON: алтай, Полеты: алтай -> алтай
    # GeoJSON: еврейская автономная, Полеты: еврейская автономная -> еврейская автономная
    # GeoJSON: ханты-мансийский - югра, Полеты: ханты-мансийский - югра -> ханты-мансийский - югра
    # GeoJSON: северная осетия - алания, Полеты: северная осетия - алания -> северная осетия - алания
    
    mapping = {
        "санкт-петербург": "санкт-петербург",
        "рост": "ростовская", # Добавлено
        "новосибир": "новосибирская", # Добавлено
        "моск": "московская", # Добавлено
        "екатеринбург": "свердловская",
        "якут": "саха якутия",
        "симферополь": "крым",
        "карачаево-черкес": "карачаево-черкесия",
        "северная осетия - алани": "северная осетия - алания",
        "ханты-мансийский - югр": "ханты-мансийский - югра",
        "еврейская автономна": "еврейская автономная",
        "забайкальск": "забайкальский",
        "приморск": "приморский",
        "камчатск": "камчатский",
        "хабаровск": "хабаровский",
        "магаданск": "магаданская",
        "иркутск": "иркутская",
        "тюменск": "тюменская",
        "самарск": "самарская",
        "калининградск": "калининградская",
        "краснодарск": "краснодарский",
        "красноярск": "красноярский",
        "мурманск": "мурманская",
        "новосибирск": "новосибирская",
        "оренбургск": "оренбургская",
        "пензенск": "пензенская",
        "пермск": "пермский",
        "псковск": "псковская",
        "рязанск": "рязанская",
        "саратовск": "саратовская",
        "сахалинск": "сахалинская",
        "смоленск": "смоленская",
        "ставропольск": "ставропольский",
        "тамбовск": "тамбовская",
        "тверск": "тверская",
        "томск": "томская",
        "тульск": "тульская",
        "ульяновск": "ульяновская",
        "чукотск": "чукотский",
        "волгоградск": "волгоградская",
        "вологодск": "вологодская",
        "воронежск": "воронежская",
        "ярославск": "ярославская",
        "белгородск": "белгородская",
        "кировск": "кировская",
        "липецк": "липецкая",
        "нижегородск": "нижегородская",
        "новгородск": "новгородская",
        "омск": "омская",
        "орловск": "орловская",
        "амурск": "амурская",
        "адыге": "адыгея",
        "алтайск": "алтайский",
        "башкортостан": "башкортостан",
        "бурят": "бурятия",
        "калмыки": "калмыкия",
        "карели": "карелия",
        "коми": "коми",
        "крым": "крым",
        "марий эл": "марий эл",
        "москва": "москва",
        "севастополь": "севастополь",
        "татарстан": "татарстан",
        "тыва": "тыва",
        "удмуртия": "удмуртия",
        "чечен": "чечня",
        "чуваш": "чувашия",
        "сумск": "сумска",
        "алтай": "алтай",
        "еврейская автономная": "еврейская автономная",
        "ханты-мансийский - югра": "ханты-мансийский - югра",
        "северная осетия - алания": "северная осетия - алания"
    }
    
    for key, value in mapping.items():
        if name.startswith(key):
            return value

    # Если прямое совпадение не найдено, пытаемся найти близкое совпадение
    if geojson_region_names:
        close_matches = difflib.get_close_matches(name, geojson_region_names, n=1, cutoff=0.8)
        if close_matches:
            return close_matches[0]

    return name

def convert_shapefile_to_geojson(shp_path, output_path):
    """Конвертирует shape-файл в GeoJSON."""
    try:
        sf = shapefile.Reader(shp_path, encoding="utf-8")
        
        # Попытка найти поле с именем региона
        field_names = [field[0] for field in sf.fields[1:]] # Пропускаем поле 'DeletionFlag'
        region_name_field = None
        for name_candidate in ['name_ru', 'NAME', 'REGION', 'ADM_NAME', 'NL_NAME_1']:
            if name_candidate in field_names:
                region_name_field = name_candidate
                break
        
        # Если не нашли подходящее поле, используем индекс 3 по умолчанию (как было ранее)
        # и предупреждаем об этом.
        if region_name_field is None:
            print("Warning: Could not find a common region name field (NAME, REGION, ADM_NAME, NL_NAME_1). Defaulting to record index 3.")
            region_name_index = 3 # Соответствует record[3]
        else:
            region_name_index = field_names.index(region_name_field)

        features = []
        for shape_rec in sf.iterShapeRecords():
            # print("--- New Record ---")
            # for i, field_name in enumerate(field_names):
            #     value = shape_rec.record[i] if i < len(shape_rec.record) else 'N/A'
            #     print(f"  Field {field_name}: {value}")

            original_region_name = shape_rec.record[region_name_index] if len(shape_rec.record) > region_name_index else 'N/A'
            standardized_region_name = standardize_region_name(original_region_name)

            feature = {
                "type": "Feature",
                "geometry": shape_rec.shape.__geo_interface__,
                "properties": {
                    "original_name": original_region_name,
                    "region_name": standardized_region_name
                }
            }
            features.append(feature)
            # print(f"GeoJSON Feature - Original: '{original_region_name}', Standardized: '{standardized_region_name}')
        
        geojson = {
            "type": "FeatureCollection",
            "features": features
        }
        
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(geojson, f, ensure_ascii=False, indent=2)
            
        print(f"Successfully converted {shp_path} to {output_path}")
        return True
    except Exception as e:
        print(f"Error converting shapefile: {e}")
        return False

if __name__ == '__main__':
    # Путь к исходному shape-файлу (без расширения)
    shp_file_path = "/Users/danil_ka88/Desktop/moscow/project/Russia-Admin-Shapemap-main/RF/admin_4"
    # Путь для сохранения итогового GeoJSON файла
    output_geojson_path = "/Users/danil_ka88/Desktop/moscow/project/data/russia_regions.geojson"
    
    convert_shapefile_to_geojson(shp_file_path, output_geojson_path)